#!/usr/bin/python -O
# vim: set fileencoding=utf-8 :

"""\
IEC 61131-3 Structured Text to XML compiler 1.4
Copyleft (c), 2009-2011 X-Pie Software GmbH

"""

import sys
import fileinput
from optparse import OptionParser
from pyPEG import parse
from iec_grammar import *
from global_vars import *
from datatype import *
from translate import *
import re
r = re.compile

def printInfo(option, opt_str, value, parser):
    sys.stdout.write(__doc__)
    sys.exit(0)

optParser = OptionParser()
optParser.add_option("-E", "--EPAS-pragmas", action="store_true", dest="epaspragmas",
        help="read and process EPAS pragmas at top of file", default=False)
optParser.add_option("-o", "--output", dest="outputFile", metavar="FILE",
        help="place output in file FILE")
optParser.add_option("-p", "--parse-only", action="store_true", dest="parseonly",
        help="parse only, then output pyAST as text to stdout", default=False)
optParser.add_option("--version", action="callback", callback=printInfo, help="show version info")
(options, args) = optParser.parse_args()

comment = r(r"(\(\*.*?\*\))|({.*?})", re.S)
def iec(): return iec_source,

pragma = r(r"\s*\(\*\s*\@(\w+)\s*:=\s*'(.*?)'\s*\*\)\s*")
empty = r(r"^\s*$")

def consumeEPAS(files):
    global comment
    for l in files:
        m = empty.match(l)
        if m:
            continue
        m = pragma.match(l)
        if m:
            if m.group(1) == "NESTEDCOMMENTS" and m.group(2) == "Yes":
                comment = [ r("{.*?}"), ( "(*", -1, [ r(r"(?m)[^*()]+"), comment, r(r"(?m)(\((?!\*))+"), r(r"(?m)\)+"), r(r"(?m)(\*(?!\)))+") ], "*)" ) ]
        else:
            break

def gen_pou_var_map(ast_node, pou_name):
  var_map_var_input = {}
  var_map_var_inout = {}
  var_map_var_output = {}
  var_map_var = {}
  var_map_var_temp = {}
  var_map_var_external = {}
  var_map_var_constant = {}

  pou_var_map = { "var_input" : var_map_var_input,
                  "var_inout" : var_map_var_inout,
                  "var_output" : var_map_var_output,
                  "var" : var_map_var,
                  "var_temp" : var_map_var_temp,
                  "var_external" : var_map_var_external,
                  "var_constant" : var_map_var_constant
                }

  var_map[pou_name] = pou_var_map

  for i in range(0, len(ast_node)):
    if ast_node[i][0] == "input_declarations":
      for j in range(0, len(ast_node[i][1])):
        for k in range(0, len(ast_node[i][1][j][1]) - 1):
          var_name = ast_node[i][1][j][1][k][1][0]
          var_ast_node = ast_node[i][1][j][1][len(ast_node[i][1][j][1]) - 1]
          var_map_var_input[var_name] = var_ast_node
    elif ast_node[i][0] == "inout_declarations":
      for j in range(0, len(ast_node[i][1])):
        for k in range(0, len(ast_node[i][1][j][1]) - 1):
          var_name = ast_node[i][1][j][1][k][1][0]
          var_ast_node = ast_node[i][1][j][1][len(ast_node[i][1][j][1]) - 1]
          var_map_var_inout[var_name] = var_ast_node
    elif ast_node[i][0] == "output_declarations":
      for j in range(0, len(ast_node[i][1])):
        for k in range(0, len(ast_node[i][1][j][1]) - 1):
          var_name = ast_node[i][1][j][1][k][1][0]
          var_ast_node = ast_node[i][1][j][1][len(ast_node[i][1][j][1]) - 1]
          var_map_var_output[var_name] = var_ast_node
    elif ast_node[i][0] == "var_declarations":
      for j in range(0, len(ast_node[i][1])):
        for k in range(0, len(ast_node[i][1][j][1]) - 1):
          var_name = ast_node[i][1][j][1][k][1][0]
          var_ast_node = ast_node[i][1][j][1][len(ast_node[i][1][j][1]) - 1]
          var_map_var[var_name] = var_ast_node
    elif ast_node[i][0] == "function_var_decls":
      if ast_node[i][1][0][0] == "constant":
        for j in range(1, len(ast_node[i][1])):
          var_name = ast_node[i][1][j][1][0][1][0]
          var_ast_node = ast_node[i][1][j][1][1]
          var_map_var_constant[var_name] = var_ast_node
      elif ast_node[i][1][0][0] == "var_init_decl":
        for j in range(0, len(ast_node[i][1])):
          var_name = ast_node[i][1][j][1][0][1][0]
          var_ast_node = ast_node[i][1][j][1][1]
          var_map_var[var_name] = var_ast_node

# global hash maps
def parseHashmaps(ast_iec_source):
  global datatype_map
  global function_map
  global function_block_map
  global program_map
  global configuration_map
  global var_map

  ast_len = len(ast_iec_source)
  for i in range(0, ast_len):
    if ast_iec_source[i][0] == "data_type_declaration":
      ast_node = ast_iec_source[i][1]
      type_name = ast_node[0][1][0][1][0]
      datatype_map[type_name] = ast_node;

    elif ast_iec_source[i][0] == "function_declaration":
      ast_node = ast_iec_source[i][1]
      function_name = ast_node[0][1][0]
      function_map[function_name] = ast_node
      gen_pou_var_map(ast_node, function_name)

    elif ast_iec_source[i][0] == "function_block_declaration":
      ast_node = ast_iec_source[i][1]
      function_block_name = ast_node[0][1][0]
      function_block_map[function_block_name] = ast_node
      gen_pou_var_map(ast_node, function_block_name)

    elif ast_iec_source[i][0] == "program_declaration":
      ast_node = ast_iec_source[i][1]
      program_name = ast_node[0][1][0]
      program_map[program_name] = ast_node
      gen_pou_var_map(ast_node, program_name)

    elif ast_iec_source[i][0] == "configuration_declaration":
      ast_node = ast_iec_source[i][1]
      configuration_name = ast_node[0][1][0]
      configuration_map[configuration_name] = ast_node

    else:
      print "Unknown declaration type: " + ast_iec_source[i][0]

try:
    files = fileinput.input(args)
    if options.epaspragmas:
        consumeEPAS(files)
        files.close()
        files = fileinput.input(args)

    ast = parse(iec, files, True, comment)
    ast_iec_source = ast[0][1]
    parseHashmaps(ast_iec_source)
### datatype api test
    #node = getDatatypeDeclarationType("AI_Signal")
    #node = getEnumDatatypeEnumValues("AI_Signal")
    #node = getEnumDatatypeIntValues("AI_Signal")
    #node = getEnumDatatypeInitEnumValue("AI_Signal")
    #node = getEnumDatatypeInitIntValue("AI_Signal")
    #node = getEnumDatatypeIntValueOf("AI_Signal", "Differential")
    #node = getDirectlyDatatypeType("program0", "var_output", "LocalVar0")
    #node = getDirectlyDatatypeType("function0", "var_input", "LocalVar2")
    #node = getDirectlyDatatypeInitValue("function0", "var_input", "LocalVar2")
    #node = getStructDatatypeFieldNum("AI_Board")
    #node = getStructDatatypeFieldName("AI_Board", 0)
    #node = getStructDatatypeFieldType("AI_Board", 0)
    #node = getStructDatatypeFieldOffset("AI_Board", 1)
    #node = getStructDatatypeFieldType_byName("AI_Board", "MIN")
    #node = getStructDatatypeFieldOffset_byName("AI_Board", "MAX")
    #node = getStructDatatypeTotalSize("AI_Board")
    #print(node)
###
    translate()
except KeyboardInterrupt:
    sys.stderr.write("\n")
    sys.exit(1)
except:
    me, parm, tb = sys.exc_info()
    sys.stderr.write(str(parm) + "\n")
    sys.exit(5)
